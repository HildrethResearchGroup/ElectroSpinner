//
//  PrintButtons.swift
//  ElectroSpinner
//
//  Created by Owen Hildreth on 2/23/20.
//  Copyright (c) 2020 Hildreth Research Group. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import Cocoa

public class PrintButtons : NSObject {

    //// Drawing Methods

    public class func drawConnectionIndicator(status_connected status_connected: Bool = false) {
        //// Color Declarations
        let color_connected = NSColor(calibratedRed: 0.292, green: 1, blue: 0, alpha: 1)
        let stroke_connected = NSColor(calibratedHue: color_connected.hueComponent, saturation: color_connected.saturationComponent, brightness: 0.7, alpha: color_connected.alphaComponent)
        let color_notConnected = NSColor(calibratedRed: 0.588, green: 0.588, blue: 0.588, alpha: 1)
        let stroke_notConnected = NSColor(calibratedHue: color_notConnected.hueComponent, saturation: color_notConnected.saturationComponent, brightness: 0.4, alpha: color_notConnected.alphaComponent)

        //// Variable Declarations
        let connectionColor: NSColor = status_connected ? color_connected : color_notConnected
        let connectionStroke: NSColor = status_connected ? stroke_connected : stroke_notConnected

        //// Oval Drawing
        let ovalPath = NSBezierPath(ovalInRect: NSMakeRect(2, 2, 20, 20))
        connectionColor.setFill()
        ovalPath.fill()
        connectionStroke.setStroke()
        ovalPath.lineWidth = 1.5
        ovalPath.stroke()
    }

    public class func drawPrint(status_connected status_connected: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.currentContext()!.CGContext

        //// Color Declarations
        let color_connected = NSColor(calibratedRed: 0.292, green: 1, blue: 0, alpha: 1)
        let stroke_connected = NSColor(calibratedHue: color_connected.hueComponent, saturation: color_connected.saturationComponent, brightness: 0.7, alpha: color_connected.alphaComponent)
        let color_notConnected = NSColor(calibratedRed: 0.588, green: 0.588, blue: 0.588, alpha: 1)
        let stroke_notConnected = NSColor(calibratedHue: color_notConnected.hueComponent, saturation: color_notConnected.saturationComponent, brightness: 0.4, alpha: color_notConnected.alphaComponent)

        //// Variable Declarations
        let connectionColor: NSColor = status_connected ? color_connected : color_notConnected
        let connectionStroke: NSColor = status_connected ? stroke_connected : stroke_notConnected

        //// Oval Drawing
        let ovalRect = NSMakeRect(2, 2, 50, 50)
        let ovalPath = NSBezierPath(ovalInRect: ovalRect)
        connectionColor.setFill()
        ovalPath.fill()
        connectionStroke.setStroke()
        ovalPath.lineWidth = 1.5
        ovalPath.stroke()
        let ovalTextContent = NSString(string: "S")
        let ovalStyle = NSMutableParagraphStyle()
        ovalStyle.alignment = .Center

        let ovalFontAttributes = [NSFontAttributeName: NSFont(name: "HelveticaNeue", size: 23)!, NSForegroundColorAttributeName: NSColor.blackColor(), NSParagraphStyleAttributeName: ovalStyle]

        let ovalTextHeight: CGFloat = ovalTextContent.boundingRectWithSize(NSMakeSize(ovalRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: ovalFontAttributes).size.height
        let ovalTextRect: NSRect = NSMakeRect(ovalRect.minX, ovalRect.minY + (ovalRect.height - ovalTextHeight) / 2, ovalRect.width, ovalTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(ovalRect)
        ovalTextContent.drawInRect(NSOffsetRect(ovalTextRect, 0, 1), withAttributes: ovalFontAttributes)
        NSGraphicsContext.restoreGraphicsState()
    }

}
